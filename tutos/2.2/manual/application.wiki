<<header| =Writing a client/server Eliom application >>

//The code of this tutorial has been tested with the 2.2 release of
  the Ocsigen bundle.//\\

In this chapter, we will write a [[site:graffiti/|collaborative
drawing application]].  It is a client/server Web application
displaying an area where users can draw using the mouse, and see what
other users are drawing. <<webonly| The final code is available <<a_file
src="tutorial.tar.gz"|for download>>.>>

<<|outline target="documentation">>

==@@id="basics"@@ Basics==

===My first page===

<<concepts|Services\\Configuration file\\Static validation of HTML>>

Our Web application consists of a single page for now. Let's start by
creating a very basic page.  We define the service that will implement
this page by the following declaration:

<<code language="ocaml" |
open Lwt
open Eliom_content.Html5.D
open Eliom_service
open Eliom_parameter
open Eliom_registration.Html5

let main_service =
  register_service ~path:["graff"] ~get_params:unit
    (fun () () -> return (html (head (title (pcdata "Page title")) [])
                               (body [h1 [pcdata "Graffiti"]])))>>

The same, written with fully qualified names (without {{{open}}}):

<<code language="ocaml"|
let main_service =
  Eliom_registration.Html5.register_service
    ~path:["graff"] 
    ~get_params:Eliom_parameter.unit
    (fun () () ->
      Lwt.return
        (Eliom_content.Html5.D.html
          (Eliom_content.Html5.D.head (Eliom_content.Html5.D.title
					 (Eliom_content.Html5.D.pcdata "")) [])
          (Eliom_content.Html5.D.body
	     [Eliom_content.Html5.D.h1
		 [Eliom_content.Html5.D.pcdata "Graffiti"]])))
>>

<<|BB
  Why not just stick with one scheme of opening Ocsigen modules?
>>

Copy one of the two pieces of code above in a file {{{graffiti.ml}}},
then compile it with the following command ; it produce a file called
{{{graffiti.cmo}}}.

{{{
ocamlfind ocamlc -thread -package eliom.server -c graffiti.ml
}}}

Download the configuration file <<a_file
src="tutorial/chapter1/start/graffiti.conf"|graffiti.conf>>, then launch
Ocsigen server, with the following command:

{{{
ocsigenserver -c graffiti.conf
}}}

Your page is now available at URL [[http://localhost:8080/graff|{{{http://localhost:8080/graff}}}]].


<<concept title="Services"|

Unlike typical Web programming techniques (CGI, PHP,~ ...), with
Eliom, you don't write one file for each URL, but a single OCaml module
(*.cmo or *.cma) for the whole Web site.

The <<a_api project="eliom" | module Eliom_service >> module allows
to create new entry points to your Web site, called //services//. In
general, services are attached to a URL and generate a Web page.
Services are represented by OCaml values, through which you must
register a function that will generate a page.

The {{{~path}}} parameter corresponds to the URL where you want to
attach your service. It is a list of strings.  The value
<<code-inline|["foo"; "bar"]>> corresponds to the URL
<<code-inline|foo/bar>>.  <<code-inline|["dir"; ""]>> corresponds to
the URL <<code-inline|dir/>> (that is: the default page of the
directory <<code-inline|dir>>).

>>

<<concept title="Configuration file"|

If you consider the sample configuration file previously provided, it
contains various directives for Ocsigen server (port, log files,
extensions to be loaded, etc.), and something like:

{{{
<host>
    <static dir="/path_to/graffiti" />
    <eliom module="/path_to/graffiti.cmo" />
</host>
}}}

These instructions tell the server to:

* serve files from the directory <<code-inline|
  /path_to/graffiti >> if they exist,
* generate pages from services in the Eliom application
  {{{graffiti.cmo}}} otherwise.

>>

<<concept title="Static validation of HTML"|

There are several ways to create pages for Eliom.  You can generate
pages as strings (as in other Web frameworks).  But we prefer checking
at compile time that the HTML will be correct.  Eliom provides several
modules to do that, either using OcamlDuce (if you have it installed)
or using OCaml's polymorphic variants.  This tutorial is using the
second solution, using the module <<a_api project="eliom"
| module Eliom_content.Html5.D >>. This module defines a
construction function for each HTML5 tag.

//Note that it is also possible to use the usual HTML syntax (see
 <<a_api project="tyxml" | module Pa_tyxml >>).//

Ocsigen use the <<a_manual project="tyxml" version="dev"|TyXML>>
library to build HTML tree.  The TyXML library is very strict and
compels you to respect HTML5 standard (with some limitations). For
example if you write:

<<code language="ocaml"|
(html
   (head (title (pcdata "")) [pcdata ""])
   (body [pcdata "Hallo"]))
>>

You will get the following error message, referring at the end of line 2:

{{{
Error: This expression has type ([> `PCDATA ] as 'a) Html5.elt
       but an expression was expected of type Html5_types.head_content_fun Html5.elt
       Type 'a is not compatible with type Html5_types.head_content_fun =
           [ `Base
           | `Command
           | `Link
           | `Meta
           | `Noscript of [ `Link | `Meta | `Style ]
           | `Script
           | `Style ]
       The second variant type does not allow tag(s) `PCDATA
}}}

where <<a_api project="tyxml" | type Html5_types.head_content_fun >>
is the type of content allowed inside {{{<head>}}} ({{{<base>}}},
{{{<command>}}}, {{{<link>}}}, {{{<meta>}}}, etc.). You see that
{{{`PCDATA}}} (i.e. raw text) is not included in this polymorphic
variant type.

**Another example:** In HTML5, some tags cannot be empty. For example
{{{<table>}}}must contain at least one row.  To enforce this, the
<<a_api project="tyxml" version="dev" text="Html5.table"| val
Html5.F.table >> function takes two parameters: the first one is the
first row, the second one is a list containing all the other rows
(same thing for {{{<tr>}}}, {{{<form>}}}, {{{<select>}}}, ...).  This
forces the user to handle the empty list case specially and thus make
the output conform to the recommendation from the W3C.

//Strict typing of HTML may seem arduous initially, but in fact it is
very easy to get used to.  It actually saves a huge amount of
debugging time as you will never have to bother about the validity of
pages afterwards.//

A more detailed introduction to the construction of HTML5 tree is
available in the <<a_api project="tyxml" text="TyXML reference API" |
module Html5.F >>.

>>

<<concept title="Lwt"|

**Important warning:** All the functions you write must be written in
collaborative manner using Lwt. Lwt is a very convenient way to
implement concurrent programs in OCaml, which is now widely used even
for applications not related to Ocsigen.

For now we will just use the {{{Lwt.return}}} function as above.  We
will come back later on Lwt programming.  You can also have a look at
the <<a_manual project="lwt"|Lwt programming guide>>.

>>

===Execute parts of the program on the client===

<<concepts|
Service sending an application\\
Client and server code\\
Compiling a Web application with server and client parts\\
Calling Javascript methods with Js_of_ocaml\\
>>

To create our first service, we used the function <<a_api
project="eliom" | val Eliom_registration.Html5.register_service>>, as we
wanted to return HTML5. But actually we want our service to send an
Eliom application.  To do that, we will create our own registration
module by using the functor {{{Eliom_registration.App}}}:

<<|BB
  This is a bit fast, especially if you just came to Ocsigen. The following
  questions popped into my mind: What is an Eliom application? What's its
  motivation, what comprises it and how does is work?
>>

<<code language="ocaml"|
module My_app =
  Eliom_registration.App (struct
      let application_name = "graffiti"
    end)
>>

It is now possible to use {{{MyAppl}}} instead of
{{{Eliom_registration.Html5}}} for registering our main service
(now at URL {{{/}}}):

<<code language="ocaml"|
let main_service =
  My_app.register_service ~path:[""]
    ~get_params:Eliom_parameter.unit
    (fun () () ->
      Lwt.return
        (html
           (head (title (pcdata "Graffiti")) [])
           (body [h1 [pcdata "Graffiti"]]) ) )
>>

We now want to add some OCaml code to be executed by the browser. For
that purpose, Eliom provides a syntax extension to distinguish between
server and client code in the same file. We start by a very basic
program, that will display a message to the user by calling the
Javascript function {{{alert}}}. Add the following lines to the
program,

<<code language="ocaml"|
{client{
  let _ = Dom_html.window##alert(Js.string "Hello")
}}
>>

Download the <<a_file src="tutorial/chapter1/no_oclosure/Makefile">>
and <<a_file src="tutorial/chapter1/no_oclosure/graffiti.conf">>
files. You may want to adapt the configuration file to set some paths,
especially the directory for static files (see also {{{STATICDIR}}} in
the Makefile). It is not necessary (and even not a good idea, for
security reasons) to put {{{.ml}}} and {{{.cma}}}/{{{.cmo}}} in the
static files directory!

The default {{{Makefile}}} recognizes files using Eliom's syntax extension by
their extension {{{.eliom}}} (instead of {{{.ml}}}).
Put the new version of our program in a file named {{{graffiti.eliom}}}
and compile it by typing:

{{{
make
}}}

This will generate a file called {{{graffiti.cma}}} and another one
called {{{graffiti.js}}}. The latter //must be placed in the static
file directory//. To copy it to its rightful place, type:

{{{
make install
}}}

And finaly, run Ocsigen server:

{{{
ocsigenserver -c graffiti.conf
}}}

Your page is now available at URL {{{http://localhost:8080/}}}. It
should open an alert box. If not, check that the static file directory
in the configuration file is correct.

<<concept title="Client side code"|

Eliom's syntax extension implements four kinds of quotations. Three of
them are available at source file toplevel:

* {{{ {client{ ... }} }}} for client side specific code.
* {{{ {server{ ... }} }}} (optional) for server side specific code.
* {{{ {shared{ ... }} }}} for code that will be used both for the server and the client.

and the last one is available at the expression level:

* {{{ {{ ... }} }}} for client side event handler.

In the default Makefile we automatically split the code, compile the server
part as usual, and compile the client part using {{{js_of_ocaml}}},
to create a Javascript file.

>>

<<concept title="Js_of_ocaml"|

 The client-side parts of the program are compiled to Javascript by
Js_of_ocaml, which recompiles OCaml bytecode, generating Javascript.
It is easy to bind Javascript libraries to call Javascript functions
from OCaml programs. In the example, we are using the <<a_api
project="js_of_ocaml" | module Js_of_ocaml.Dom_html >> module, which is a binding
to allow the manipulation of an HTML page.

Js_of_ocaml is using a syntax extension to call Javascript methods:
* {{{obj##m(a, b, c)}}} to call the method {{{m}}} of object {{{obj}}}
with parameters {{{(a, b, c)}}}
* {{{obj##m}}} to get a property
* {{{obj##m <- e}}} to set a property
* {{{jsnew constr (e1, ..., en)}}} to call a Javascript constructor

Find more information in <<a_manual project="js_of_ocaml" |
Js_of_ocaml's manual >>.

>>

===Accessing server side variables on client side code===

<<concepts|
Executing client side code after loading a page\\
Sharing server side values\\
Converting an HTML value to a portion of page (a.k.a. Dom node)\\
Manipulating HTML node 'by reference'
>>

The client side process is not really separated from the server side,
we can access some server variables from client code. For instance:

<<code language="ocaml"|
let count = ref 0
>>

<<code language="ocaml"|
let main_service =
  My_app.register_service ~path:[""] ~get_params:Eliom_parameter.unit
    (fun () () ->
      let count = incr count; !count in
      Eliom_service.onload {{
        Dom_html.window##alert(Js.string
	  (Printf.sprintf "You came %i times to this page" %count))
      }};
      Lwt.return
        (html
           (head (title (pcdata "Graffiti")) [])
           (body [h1 [pcdata "Graffiti"]]) ) )
>>

Here, we are increasing the reference {{{count}}} each time the page
is accessed. When the page is loaded the client execute the event
handler registred with <<a_api project="eliom" subproject="server" |
val Eliom_service.onload >> : this client side code access to the
counter using the syntax extension {{{%count}}}, and displays it in a
message box.

<<concept

  title="Executing code after loading a page" |

  To execute some code on client side just after loading a page, use
  function <<a_api project="eliom" version="dev" | val
  Eliom_service.onload>>.  It takes as parameter an event handler
  that you can provide using the syntax {{{ {{ ... }} }}}.

>>

<<concept

  title="Antiquotations: Using server side values in client code" |

  Client side code can reference copies of server side values using
  the {{{%variable}}} syntax.  It is currently limited to code
  included in {{{ {{ ... }} }}} (and not yet available in top level
  client code {{{ {client{ ... }} }}}). Values sent that way are
  weakly type checked: the name of the client side type must match the
  server side one.  If you define a type and want it to be available
  on both sides, declare it in {{{ {shared{ ... }} }}}. See the Eliom
  manual, for more information anout the <<a_manual project="eliom"
  chapter="client" fragment="syntax%" | Eliom's syntax extension >>
  and its <<a_manual project="eliom" chapter="config"
  fragment="compiling"|compilation process>>.

>>

<<|BB/BS This only applies to elements created by Html5.F
It is possible to send almost any type of values that way, but keep in
mind that sent values are //copies// of server side ones. For HTML
elements, this is not always the expected behaviour. Considering the
following piece of code, the {{{onload}}} event handler won't do
anything noticeable because we added the {{{<div>some text</div>}}} to
a copy of the {{{<body>}}} element. Hence, the actual page's
{{{<body>}}} is not modified.

<<code language="ocaml"|
let main_service =
  My_app.register_service ~path:[""] ~get_params:Eliom_parameter.unit
    (fun () () ->
      let container = body [h1 [pcdata "Graffiti"]] in
      Eliom_service.onload {{
        Html5.Manip.appendChild %container (div [pcdata "some text"]);
      }}
      Lwt.return
        (html
           (head (title (pcdata "Graffiti")) [])
           (container) ) )
>>

>>

==@@id="graffiti"@@ Collaborative drawing application==

===Drawing on a canvas===

<<concepts|

Canvas

>>

We now want to draw something on the page using an HTML5 canvas. As a
first-step, we define a client-side function called {{{draw}}} that
draw a line between two given points in a canvas and we call this
function once in the {{{onload}}} event handler to draw an <<span
style="color:#ffaa33;"|orange>> line. Here is the (full) new version
of the program:

<<code language="ocaml"|
module My_app =
  Eliom_registration.App (
    struct
      let application_name = "graffiti"
    end)

{shared{
  open Eliom_content
  open Eliom_content.Html5.D
  let width = 700
  let height = 400
}}

{client{
  open Eliom_content
  let draw ctx (color, size, (x1, y1), (x2, y2)) =
    ctx##strokeStyle <- (Js.string color);
    ctx##lineWidth <- float size;
    ctx##beginPath();
    ctx##moveTo(float x1, float y1);
    ctx##lineTo(float x2, float y2);
    ctx##stroke()
}}

let canvas_elt =
  canvas ~a:[a_width width; a_height height]
    [pcdata "your browser doesn't support canvas"]

let page =
  (html
    (head (title (pcdata "Graffiti")) [])
    (body [h1 [pcdata "Graffiti"];
           canvas_elt] ) )

let onload_handler = {{
  let canvas = Html5.To_dom.of_canvas %canvas_elt in
  let ctx = canvas##getContext (Dom_html._2d_) in
  ctx##lineCap <- Js.string "round";
  draw ctx ("#ffaa33", 12, (10, 10), (200, 100))
}}

let main_service =
  My_app.register_service ~path:[""] ~get_params:Eliom_parameter.unit
    (fun () () ->
      Eliom_service.onload onload_handler;
      Lwt.return page)

>>

<<concept

  title="Javascript datatypes in OCaml"|

  Note that we use the function <<a_api project="js_of_ocaml" | val
  Js_of_ocaml.Js.string>> from the Js_of_ocaml's library to convert an OCaml
  string into a JS string.

>>

===Single user drawing application===

<<concepts|
Mouse events with arrows
>>

We now want to catch mouse events to draw lines with the mouse like
with the //brush// tools of any classical drawing application. One
solution would be to mimic classical Javascript code in OCaml ; for
example by using the function <<a_api project="js_of_ocaml"| val
Js_of_ocaml.Dom_events.listen >> that is the Js_of_ocaml's equivalent of
{{{addEventListener}}}. However, this solution is at least as much
verbose than the Javascript equivalent, hence not
satisfactory. Another idea is to use the expressivity allowed by the
functional part of OCaml to hide the complexity behind a nice
combinator library and dramaticaly reduce the code size. In this
tutorial, we will use the //experimental// <<a_api
project="js_of_ocaml"| module Event_arrows >> module from the
Js_of_ocaml's library.

<<wip|**Warning** The event arrows are an experimental
      feature. Feedbacks and suggestions sent to the
      [[https://sympa.mancoosi.univ-paris-diderot.fr/wws/info/ocsigen|Ocsigen
      mailing-list]] will help to improve the API. >>

Replace the {{{onload_handler}}} of the previous example by the
following piece of code, then compile and draw !

<<code language="ocaml"|
let onload_handler = {{

  let canvas = Html5.To_dom.of_canvas %canvas_elt in
  let ctx = canvas##getContext (Dom_html._2d_) in
  ctx##lineCap <- Js.string "round";

  let x = ref 0 and y = ref 0 in

  let set_coord ev =
    let x0, y0 = Dom_html.elementClientPosition canvas in
    x := ev##clientX - x0; y := ev##clientY - y0
  in

  let compute_line ev =
    let oldx = !x and oldy = !y in
    set_coord ev;
    ("#ff9933", 5, (oldx, oldy), (!x, !y))
  in

  let line ev = draw ctx (compute_line ev) in

  let open Event_arrows in
  ignore (run (mousedowns canvas
                 (arr (fun ev -> set_coord ev; line ev) >~>>
                  first [mousemoves Dom_html.document (arr line);
                         mouseup Dom_html.document >~>> (arr line)])) ())
}}

>>

We use two references {{{x}}} and {{{y}}} to record the last mouse
position.  The function {{{set_coord}}} updates these references from
mouse event data.  The function {{{compute_line}}} computes the
coordinates of a line from the initial (old) coordinates to the new
coordinates--the event data sent as a parameter.

The last four lines of code, that implements the event handling loop, could be
read as: for each {{{mousedown}}} event on the canvas, do
{{{set_coord}}} then {{{line}}} (this will draw a dot), then
({{{>>>}}}) behave as the {{{first}}} of the two following lines to
terminate:

* For each mousemove event on the document, call {{{line}}} (never terminates)
* If there is a mouseup event on the document, call {{{line}}}.

<<concept

  title="Handling events with arrows"|

  The module <<a_api project="js_of_ocaml" | module Event_arrows>>
  allows us to define event listeners easily (using arrows). An arrow
  from {{{'a}}} to {{{'b}}} has type {{{('a, 'b) Event_arrows.t}}}.
  The operator {{{> > >}}} is used to bind the output
  of an arrow to the input of the following one.

  For example {{{(mouseup Dom_html.document)}}} is an arrow from
  {{{'a}}} to {{{Dom_html.mouseEvent Js.t}}}.

  The combinator <<a_api project="js_of_ocaml" | val
  Event_arrows.arr >> transforms a function of type {{{'a -> 'b}}} into
  an arrow of type {{{('a, 'b) Event_arrows.t}}}. There is also a
  combinator <<a_api project="js_of_ocaml" | val
  Event_arrows.lwt_arr >> to transform a function of type {{{'a -> 'b Lwt.t}}}
  into an arrow of type {{{('a, 'b) Event_arrows.t}}}.

  Combinators like <<a_api project="js_of_ocaml" | val
  Event_arrows.mousedowns>> or <<a_api project="js_of_ocaml" | val
  Event_arrows.mousemoves>> (ending by "s") take as parameters the
  target of the event and an arrow that will be called each time the
  event occures.

  The function <<a_api project="js_of_ocaml" | val Event_arrows.run >>
  (of type {{{('a, unit) t -> 'a -> canceller}}}) sets up an event
  handler. It returns a "canceller" that you can use to cancel it:


<<code language="ocaml"|
let c = Event_arrows.run ( ... ) in
...
Event_arrows.cancel c
>>

  The combinator <<a_api project="js_of_ocaml" | val
  Event_arrows.first>> takes a list of arrows and behaves as the first
  to terminate. All the other arrows in the list are cancelled.

>>

===Collaborative drawing application===

<<concepts|Client server communication >>

In order to see what other users are drawing, we now want to do the following:

* Send the coordinates to the server when the user draw a line, then
* Dispatch the coordinates to all connected users.

We first declare a type, shared by the server and the client,
describing the color and coordinates of drawn lines.

<<code language="ocaml"|
{shared{
  type messages = (string * int * (int * int) * (int * int))
    deriving (Json)
}}
>>

We annotate the type declaration with {{{deriving (Json)}}} to allow
type-safe deserialization of this type. Eliom forces you to use this
in order to avoid server crashes if a client sends corrupted data.
This is defined using as [[https://github.com/hnrgrgr/deriving|custom
version]] of the
[[http://code.google.com/p/deriving/wiki/Introduction|Deriving syntax
extension]].  You need to do that for each type of data sent by the
client to the server.  This annotation can only be added on types
containing exclusively basics type or other types annotated with
deriving. See the Js_of_ocaml API, for more information on the <<a_api
project="js_of_ocaml" | module Deriving_Json >> module.

Then we create an Eliom's bus to broadcast draw orders to each client
with the function <<a_api project="eliom" subproject="server"| val
Eliom_bus.create >>. This function take as parameter the type of
values carried by the bus.

<<code language="ocaml"|
let bus = Eliom_bus.create Json.t<messages>
>>

To write draw orders into the bus, we just replace the function
{{{line}}} of the {{{onload_handler}}} by:

<<code language="ocaml"|
let line ev =
  let v = compute_line ev in
  let _ = Eliom_bus.write %bus v in
  draw ctx v in
>>

Finally, to interpret the draw orders read on the bus, we add the
following line in the {{{onload_handler}}} just before the "arrow
event handler".

<<code language="ocaml"|
let _ = Lwt_stream.iter (draw ctx) (Eliom_bus.stream %bus) in
>>

Now you can try the program using two browser windows to see that the
lines are drawn on both windows.

<<concept

  title="Communication channels"|

  Eliom provides multiple ways for the server to send unsolicited data
  to the client:

* <<a_api project="eliom" subproject="server"
  | type Eliom_bus.t >> are broadcasting channels where
  client and server can participate (see also <<a_api project="eliom"
  subproject="client" | type Eliom_bus.t >> in the client
  api).
* <<a_api project="eliom" subproject="server" | module
  Eliom_react >> allows to send
  [[http://erratique.ch/software/react/doc/React|React events]] from
  the server to the client and conversly.
* <<a_api project="eliom" subproject="server" | type
  Eliom_comet.Channels.t >> are one way communication channels
  allowing finer control. It allow sending <<a_api project="lwt" |
  module Lwt_stream >> to the client.  Eliom_react and Eliom_bus are
  implemented over it.

  It is possible to control the idle behaviour with module <<a_api
  project="eliom" subproject="client" | module
  Eliom_comet.Configuration >>.

>>

===Color and size of the brush===

<<concepts| Widgets with OClosure >>

In this section, we add a color picker and slider to choose the size
of the brush. For that we used add two widgets provided by the
<<a_manual project="oclosure"|OClosure widget library>>.

For using OClosure, you have to make sure that it is installed. If you are
using the bundle, it should have been configured with the option ##--enable-oclosure##.
Cf. the [[https://github.com/ocsigen/oclosure|corresponding bundle documentation]].

To create the widgets, we add the following code in the
{{{onload_handler}}} immediatly after canvas configuration:

<<code language="ocaml"|
(* Size of the brush *)
let slider = jsnew Goog.Ui.slider(Js.null) in
slider##setMinimum(1.);
slider##setMaximum(80.);
slider##setValue(10.);
slider##setMoveToPointEnabled(Js._true);
slider##render(Js.some Dom_html.document##body);
(* The color palette: *)
let pSmall =
  jsnew Goog.Ui.hsvPalette(Js.null, Js.null,
                           Js.some (Js.string "goog-hsv-palette-sm"))
in
pSmall##render(Js.some Dom_html.document##body);
>>

And to change the size and the color of the brush, we replace the last
line of the function {{{compute_line}}} of the {{{onload_handler}}}
by:

<<code language="ocaml"|
let color = Js.to_string (pSmall##getColor()) in
let size = int_of_float (Js.to_float (slider##getValue())) in
(color, size, (oldx, oldy), (!x, !y))
>>


As last step, we need to add some stylesheets and one JS file in the
headers of our page:

<<code language="ocaml"|
let page =
  html
    (head
       (title (pcdata "Graffiti"))
       [ css_link
	   ~uri:(make_uri (Eliom_service.static_dir ())
		  ["css";"common.css"]) ();
	 css_link
	   ~uri:(make_uri (Eliom_service.static_dir ())
		  ["css";"hsvpalette.css"]) ();
	 css_link
	   ~uri:(make_uri (Eliom_service.static_dir ())
		  ["css";"slider.css"]) ();
	 css_link
	   ~uri:(make_uri (Eliom_service.static_dir ())
		  ["css";"graffiti.css"]) ();
	 js_script
	   ~uri:(make_uri  (Eliom_service.static_dir ())
		  ["graffiti_oclosure.js"]) ();
       ])
    (body [h1 [pcdata "Graffiti"]; canvas_elt])
>>

<<wip|

The previous code will not work with Eliom ≤ 2.0.1. With those
versions, the function <<a_api project="eliom" subproject="server"|
val Eliom_content.Html5.D.make_uri >> could not be used outside a service
handler. To delay the URI calculation you need to replace the constant
{{{page}}} with a function that take {{{unit}}} and returns the page.

<<code language="ocaml"|
let page () =
  html (head ...) (body ...)

...

My_app.register_service ~path:[""] ~get_params:Eliom_parameter.unit
    (fun () () ->
      Eliom_service.onload onload_handler;
      Lwt.return (page ()))
>>

In the upcoming release, the URI is not immediatly computed by the
{{{make_uri}}} function but computed each time the page is sent to the
client. This allow the definition of "global" nodes outsides of
service handler and still use relative URI.

>>

You need to install the corresponding stylesheets and images into your project:

The stylesheet files should go in the directory ##static/css##:
* the <<a_file src="tutorial/static/css/common.css"|{{{common.css}}}>>
  and <<a_file src="tutorial/static/css/hsvpalette.css"|{{{hsvpalette.css}}}>>
  are taken from the Google Closure library;
* the <<a_file src="tutorial/static/css/slider.css"|{{{slider.css}}}>>
  and <<a_file src="tutorial/static/css/graffiti.css"|{{{graffiti.css}}}>> are
  home-made css; and

the following image should go into ##static/images##:
* the <<a_file src="tutorial/static/images/hsv-sprite-sm.png"|{{{hsv-sprite-sm.png}}}>>

Finally, the {{{graffiti_oclosure.js}}} script is generated according to the
{{{graffiti.js}}} with the following command:

{{{
oclosure_req graffiti.js
}}}

Using the example <<a_file
src="tutorial/chapter1/with_oclosure/Makefile"|{{{Makefile}}}>> all
those static files are generated and installed by the {{{install}}}
rule in the configured static directory (see the {{{STATICDIR}}}
variable).


<<concept

  title="OClosure" |

  OClosure is a Js_of_ocaml binding for the Google Closure widget
  library (used for example in GMail, Google Calendar or Google Maps).
  You can use it for building complex user interfaces for your Eliom
  application. The full documentation is available [[site:|on the
  project's site]].

>>

===@@id="initial-image"@@ Sending the initial image===

<<concepts|Services sending other data types>>

To finish the first part of the tutorial, we want to save the current
drawing on server side and send the current image when a new user
arrives. To do that, we will use the
[[http://www.cairographics.org/cairo-ocaml/|Cairo binding]] for OCaml.

For using Cairo, make sure that it is installed. If you are using the bundle,
it should have been configured with the option ##--enable-cairo##.

The {{{draw_server}}} function below is the equivalent of the
{{{draw}}} function on the server side and the {{{image_string}}}
function outputs the PNG image in a string.

<<wip|

  In an ideal world, we would have a common interface for HTML5 canvas
  and the Cairo binding, so that we could share the code between
  {{{draw_server}}} and {{{draw}}}.

>>

<<code language="ocaml"|
let rgb_from_string color = (* color is in format "#rrggbb" *)
  let get_color i =
    (float_of_string ("0x"^(String.sub color (1+2*i) 2))) /. 255.
  in
  try get_color 0, get_color 1, get_color 2 with | _ -> 0.,0.,0.

let draw_server, image_string =
  let surface =
    Cairo.image_surface_create Cairo.FORMAT_ARGB32 ~width ~height
  in
  let ctx = Cairo.create surface in
  ((fun ((color : string), size, (x1, y1), (x2, y2)) ->

    (* Set thickness of brush *)
    Cairo.set_line_width ctx (float size) ;
    Cairo.set_line_join ctx Cairo.LINE_JOIN_ROUND ;
    Cairo.set_line_cap ctx Cairo.LINE_CAP_ROUND ;
    let red, green, blue =  rgb_from_string color in
    Cairo.set_source_rgb ctx ~red ~green ~blue ;

    Cairo.move_to ctx (float x1) (float y1) ;
    Cairo.line_to ctx (float x2) (float y2) ;
    Cairo.close_path ctx ;

    (* Apply the ink *)
    Cairo.stroke ctx ;
   ),
   (fun () ->
     let b = Buffer.create 10000 in
     (* Output a PNG in a string *)
     Cairo_png.surface_write_to_stream surface (Buffer.add_string b);
     Buffer.contents b
   ))

let _ = Lwt_stream.iter draw_server (Eliom_bus.stream bus)

>>

We also define a service that send the picture:

<<code language="ocaml"|
let imageservice =
  Eliom_registration.String.register_service
    ~path:["image"]
    ~get_params:Eliom_parameter.unit
    (fun () () -> Lwt.return (image_string (), "image/png"))
>>

<<wip|

With Eliom ≤ 2.0.1, the module <<a_api project="eliom"
subproject="server"| module Eliom_registration.String >> was named <<a_api
project="eliom" subproject="server" version="2.0.1"| module
Eliom_registration.Text>>.

>>

<<concept

  title="Eliom_registration"|

  The module {{{Eliom_registration}}} defines several modules with
  registration functions for a variety of data types. We have already
  seen {{{Eliom_registration.Html5}}} and {{{Eliom_registration.App}}}.
  The module {{{Eliom_registration.String}}} sends any byte output
  (represented with an OCaml string). The handler function must return
  a pair consisting of the content and the content-type.

  There are also several other output modules, for example:

* {{{Eliom_registration.Files}}} to send static files
* {{{Eliom_registration.Redirection}}} to create a redirection towards another page
* {{{Eliom_registration.Any}}} to create services that choose themselves what
they want to send
* {{{Eliom_registration.Ocaml}}} to send any OCaml data to be used in a
client side program
* {{{Eliom_registration.Action}}} to create service with no output
(the handler function just performs a side effect on the server)
and reload the current page (or not). We will see an example of actions
in the next chapter.

>>

We now want to load the initial image once the canvas is created.  Add
the following lines just between the creation of the canvas context and the
creation of the slider:

<<code language="ocaml"|
(* The initial image: *)
let img =
  Html5.To_dom.of_img
    (img ~alt:"canvas"
       ~src:(make_uri ~service:%imageservice ())
       ())
in
img##onload <- Dom_html.handler
                (fun ev -> ctx##drawImage(img, 0., 0.); Js._false);
>>

This new version of the {{{graffiti.cma}}} module now depends on
{{{cairo}}}. We must ask {{{ocsigenserver}}} to load {{{cairo}}}
before loading {{{graffiti.cma}}}. This is done by adding the
following line in the configuration file.

{{{
<extension findlib-package="cairo" />
}}}

The first version of the program is now complete. <<webonly| <<a_file
src="tutorial.tar.gz"| Download the code>>.>>

<<div class="exercices"|

====Exercises====

* Add an OClosure button to make possible to download the current
  image and save it to the hard disk (reuse the service
  {{{imageservice}}}).
  <<|BB
    Wrapping my head around the huge oclosure-API offhanded is very hard. A
    hint on how to register a click-listener with the button would help.
  >>
* Add an OClosure button with a color picker to select a color from
  the drawing. Pressing the button changes the mouse cursor, and disables
  current mouse events until the next mouse click event on the document.
  Then the color palette changes to the color of the pixel clicked.
  (Use the function {{{Dom_html.pixel_get}}}).

>>
